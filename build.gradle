plugins {
    id("org.jetbrains.kotlin.jvm") version("1.4.0")
    id("org.jetbrains.kotlin.plugin.serialization") version("1.4.0")
    id("java")
    id("maven-publish")
    id("maven")
    id("signing")
    id("com.jfrog.bintray") version("1.8.4")
}

group "me.shedaniel"
version = "1.0." + (System.getenv("GITHUB_RUN_NUMBER") == null ? "9999" : System.getenv("GITHUB_RUN_NUMBER"))

sourceCompatibility = targetCompatibility = 1.8

test {
    useJUnitPlatform()
}

tasks.test {
    filter {
        includeTestsMatching("me.shedaniel.linkie.core.tests.*")
    }
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://maven.fabricmc.net" }
    maven { url "https://jitpack.io" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx/" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-dev/" }
}

dependencies {
    compile("com.google.guava:guava:28.0-jre")
    compile("com.github.Chocohead:Tiny-Mappings-Parser:d96d4070293d9e7054693c21552eb1eb2b149679")
    compile("org.apache.commons:commons-lang3:3.9")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.4.0")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9")
    compile("org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.0-RC")
    compile("org.jetbrains.kotlin:kotlin-reflect:1.4.0")
    compile("io.fastjson:boon:0.34")
    compile("ch.qos.logback:logback-classic:1.2.3")
    compile("org.dom4j:dom4j:2.1.3")
    compile("net.fabricmc:stitch:0.5.1+build.77") {
        exclude group: "net.fabricmc", module: "tiny-mappings-parser"
    }

    testCompile("org.junit.jupiter:junit-jupiter:5.6.2")
    testCompile("org.jetbrains.kotlin:kotlin-test-junit5:1.4.0")
}

compileKotlin {
    kotlinOptions.suppressWarnings = true
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes", "-Xopt-in=kotlin.RequiresOptIn"]
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier("sources")
    from sourceSets.main.allSource
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier("javadocs")
    javadocs.failOnError false
    from javadocs.destinationDir
}

bintray {
    user = project.hasProperty("bintrayUser") ? project.property("bintrayUser") : System.getenv("BINTRAY_USER")
    key = project.hasProperty("bintrayApiKey") ? project.property("bintrayApiKey") : System.getenv("BINTRAY_KEY")
    publications = ["publication"]
    publish = true
    pkg {
        repo = "linkie"
        name = "linkie-core"
        userOrg = "shedaniel"
        licenses = ["GPL-3.0"]
        version {
            gpg {
                sign = true
            }
        }
    }
}

publishing {
    publications {
        publication(MavenPublication) {
            from components.java
            artifact(sourcesJar)
            artifact(javadocsJar)
        }
    }

    repositories {
    }
}